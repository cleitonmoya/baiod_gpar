shapiro.test(X)
source("~/Projetos/R/sim_est/exercicio02_normal_rejeicao.R", echo=TRUE)
source("~/Projetos/R/sim_est/exercicio02_normal_rejeicao.R", echo=TRUE)
source("~/Projetos/R/sim_est/exercicio02_normal_rejeicao.R", echo=TRUE)
source("~/Projetos/R/sim_est/exercicio02_normal_rejeicao.R")
source("~/Projetos/R/sim_est/exercicio02_normal_rejeicao.R")
source("~/Projetos/R/sim_est/exercicio02_normal_rejeicao.R")
source("~/Projetos/R/sim_est/exercicio02_normal_rejeicao.R")
source("~/Projetos/R/sim_est/exercicio02_normal_rejeicao.R")
source("~/Projetos/R/sim_est/exercicio02_normal_rejeicao.R")
source("~/Projetos/R/sim_est/exercicio02_normal_rejeicao.R")
source("~/Projetos/R/sim_est/exercicio02_normal_rejeicao.R")
# Simulação da Distribuição Normal - Método da Rejeição
# Clear the environment, console and plots
#dev.off(dev.list()["RStudioGD"])
rm(list = ls())
cat("\014")
dev.new() # create a new plot device
library(nortest) # Testes de normalidade
set.seed(42)
N = 100   # número de amostras
na = 0    # número de amostras aceitas
X <- numeric(100)
nit <- 0  # número de iterações
while (na<N){
x <- runif(1,min=-10,max=10)
u <- runif(1)
p <- exp(-x^2)
if (u <= p){
na <- na+1
X[na] <- x
}
nit <- nit+1
}
# taxa de aceitação
ta = na/nit
# Plota o histograma
hist(X, breaks = 20)
print(noquote(sprintf("Tax de aceitação: %.2f", ta)))
# Testes de normalidade
# H0: disribuição é normal
print(pearson.test(X))
print(lillie.test(X))
print(shapiro.test(X))
source("~/Projetos/R/sim_est/exercicio02_normal_rejeicao.R", echo=TRUE)
source("~/Projetos/R/sim_est/exercicio02_normal_rejeicao.R")
source("~/Projetos/R/sim_est/exercicio02_normal_rejeicao.R", echo=TRUE)
source("~/Projetos/R/sim_est/exercicio02_normal_rejeicao.R", echo=TRUE)
source("~/Projetos/R/sim_est/exercicio02_normal_rejeicao_cauchy.R")
pi
# Clear the environment, console and plots
#dev.off(dev.list()["RStudioGD"])
rm(list = ls())
cat("\014")
dev.new() # create a new plot device
library(nortest) # Testes de normalidade
set.seed(42)
N = 100   # número de amostras
na = 0    # número de amostras aceitas
X <- numeric(100)
nit <- 0  # número de iterações
gfunc <- function(x){
gx = (sqrt(2*pi)/pi)*dnorm(x)
return(gx)
}
x_ = seq(-5,5,0.1)
y1 = dnorm(x_)
y2 = gfunc(x_)
y3 = dcauchy(x_)
# Plot
plot(x_,y1)
lines(x_,y1,type="l", col="black")
lines(x_,y2,type="l", col="green")
lines(x_,y3,type="l", col="red")
legend("topright", legend = c("f(x)","g(x)", "gs(x)"),
col = c("black", "green", "red"), lty = 1)
# Clear the environment, console and plots
#dev.off(dev.list()["RStudioGD"])
rm(list = ls())
cat("\014")
dev.new() # create a new plot device
library(nortest) # Testes de normalidade
set.seed(42)
N = 100   # número de amostras
na = 0    # número de amostras aceitas
X <- numeric(100)
nit <- 0  # número de iterações
gfunc <- function(x){
gx = (sqrt(2*pi)/pi)*dnorm(x)
return(gx)
}
x_ = seq(-5,5,0.1)
y1 = dnorm(x_)
y2 = gfunc(x_)
y3 = 1.5*dcauchy(x_)
# Plot
plot(x_,y1)
lines(x_,y1,type="l", col="black")
lines(x_,y2,type="l", col="green")
lines(x_,y3,type="l", col="red")
legend("topright", legend = c("f(x)","g(x)", "gs(x)"),
col = c("black", "green", "red"), lty = 1)
# Clear the environment, console and plots
#dev.off(dev.list()["RStudioGD"])
rm(list = ls())
cat("\014")
dev.new() # create a new plot device
library(nortest) # Testes de normalidade
set.seed(42)
N = 100   # número de amostras
na = 0    # número de amostras aceitas
X <- numeric(100)
nit <- 0  # número de iterações
gfunc <- function(x){
gx = (sqrt(2*pi)/pi)*dnorm(x)
return(gx)
}
x_ = seq(-5,5,0.1)
y1 = dnorm(x_)
y2 = gfunc(x_)
y3 = 1.5*dcauchy(x_)
# Plot
plot(x_,y1)
lines(x_,y1,type="l", col="black")
lines(x_,y2,type="l", col="green")
lines(x_,y3,type="l", col="red")
legend("topright", legend = c("f(x)","g(x)", "gs(x)"),
col = c("black", "green", "red"), lty = 1)
# Clear the environment, console and plots
#dev.off(dev.list()["RStudioGD"])
rm(list = ls())
cat("\014")
dev.new() # create a new plot device
library(nortest) # Testes de normalidade
set.seed(42)
N = 100   # número de amostras
na = 0    # número de amostras aceitas
X <- numeric(100)
nit <- 0  # número de iterações
gfunc <- function(x){
gx = (sqrt(2*pi)/pi)*dnorm(x)
return(gx)
}
x_ = seq(-5,5,0.1)
y1 = dnorm(x_)
y2 = gfunc(x_)
y3 = dcauchy(x_)
# Plot
plot(x_,y1)
lines(x_,y1,type="l", col="black")
lines(x_,y2,type="l", col="green")
lines(x_,y3,type="l", col="red")
legend("topright", legend = c("f(x)","g(x)", "gs(x)"),
col = c("black", "green", "red"), lty = 1)
# Clear the environment, console and plots
#dev.off(dev.list()["RStudioGD"])
rm(list = ls())
cat("\014")
dev.new() # create a new plot device
library(nortest) # Testes de normalidade
set.seed(42)
N = 100   # número de amostras
na = 0    # número de amostras aceitas
X <- numeric(100)
nit <- 0  # número de iterações
gfunc <- function(x){
gx = (sqrt(2*pi)/pi)*dnorm(x)
return(gx)
}
x_ = seq(-5,5,0.1)
y1 = dnorm(x_)
y2 = gfunc(x_)
y3 = 1.1*dcauchy(x_)
# Plot
plot(x_,y1)
lines(x_,y1,type="l", col="black")
lines(x_,y2,type="l", col="green")
lines(x_,y3,type="l", col="red")
legend("topright", legend = c("f(x)","g(x)", "gs(x)"),
col = c("black", "green", "red"), lty = 1)
# Clear the environment, console and plots
#dev.off(dev.list()["RStudioGD"])
rm(list = ls())
cat("\014")
dev.new() # create a new plot device
library(nortest) # Testes de normalidade
set.seed(42)
N = 100   # número de amostras
na = 0    # número de amostras aceitas
X <- numeric(100)
nit <- 0  # número de iterações
gfunc <- function(x){
gx = (sqrt(2*pi)/pi)*dnorm(x)
return(gx)
}
x_ = seq(-5,5,0.1)
y1 = dnorm(x_)
y2 = gfunc(x_)
y3 = 1.2*dcauchy(x_)
# Plot
plot(x_,y1)
lines(x_,y1,type="l", col="black")
lines(x_,y2,type="l", col="green")
lines(x_,y3,type="l", col="red")
legend("topright", legend = c("f(x)","g(x)", "gs(x)"),
col = c("black", "green", "red"), lty = 1)
# Clear the environment, console and plots
#dev.off(dev.list()["RStudioGD"])
rm(list = ls())
cat("\014")
dev.new() # create a new plot device
library(nortest) # Testes de normalidade
set.seed(42)
N = 100   # número de amostras
na = 0    # número de amostras aceitas
X <- numeric(100)
nit <- 0  # número de iterações
gfunc <- function(x){
gx = (sqrt(2*pi)/pi)*dnorm(x)
return(gx)
}
x_ = seq(-5,5,0.1)
y1 = dnorm(x_)
y2 = gfunc(x_)
y3 = 1.3*dcauchy(x_)
# Plot
plot(x_,y1)
lines(x_,y1,type="l", col="black")
lines(x_,y2,type="l", col="green")
lines(x_,y3,type="l", col="red")
legend("topright", legend = c("f(x)","g(x)", "gs(x)"),
col = c("black", "green", "red"), lty = 1)
source("~/Projetos/R/sim_est/exercicio02_normal_rejeicao_cauchy.R")
source("~/Projetos/R/sim_est/exercicio02_normal_rejeicao_cauchy.R")
source("~/Projetos/R/sim_est/exercicio02_normal_rejeicao_grafico.R")
source("~/Projetos/R/sim_est/exercicio02_normal_rejeicao_grafico.R")
source("~/Projetos/R/sim_est/exercicio02_normal_rejeicao_grafico.R")
source("~/Projetos/R/sim_est/exercicio02_normal_rejeicao_grafico.R")
source("~/Projetos/R/sim_est/exercicio02_normal_rejeicao_grafico.R")
source("~/Projetos/R/sim_est/exercicio02_normal_rejeicao_grafico.R")
# Clear the environment, console and plots
#dev.off(dev.list()["RStudioGD"])
rm(list = ls())
cat("\014")
dev.new() # create a new plot device
library(nortest) # Testes de normalidade
set.seed(42)
N = 100   # número de amostras
na = 0    # número de amostras aceitas
X <- numeric(100)
nit <- 0  # número de iterações
gsfunc <- function(x){
if (x >= -10) and (x <= 10){
# Clear the environment, console and plots
#dev.off(dev.list()["RStudioGD"])
rm(list = ls())
cat("\014")
dev.new() # create a new plot device
library(nortest) # Testes de normalidade
set.seed(42)
N = 100   # número de amostras
na = 0    # número de amostras aceitas
X <- numeric(100)
nit <- 0  # número de iterações
gsfunc <- function(x){
if (x >= -10) and (x <= 10){
# Clear the environment, console and plots
#dev.off(dev.list()["RStudioGD"])
rm(list = ls())
cat("\014")
dev.new() # create a new plot device
library(nortest) # Testes de normalidade
set.seed(42)
N = 100   # número de amostras
na = 0    # número de amostras aceitas
X <- numeric(100)
nit <- 0  # número de iterações
gsfunc <- function(x){
if (x >= -10 & x <= 10){
gs = sqrt(2*pi)
}
else {
gs = 0
}
}
x_ = seq(-5,5,0.1)
y1 = dnorm(x_) # f(x)
y2 = y1 # g(x)
y3 = gsfunc(x_)
# Clear the environment, console and plots
#dev.off(dev.list()["RStudioGD"])
rm(list = ls())
cat("\014")
dev.new() # create a new plot device
library(nortest) # Testes de normalidade
set.seed(42)
N = 100   # número de amostras
na = 0    # número de amostras aceitas
X <- numeric(100)
nit <- 0  # número de iterações
gsfunc <- function(x){
if (x >= -10 & x <= 10){
gs = sqrt(2*pi)
}
else {
gs = 0
}
}
x_ = seq(-5,5,0.1)
y1 = dnorm(x_) # f(x)
y2 = y1 # g(x)
y3 = sapply(x_, gsfunc)
# Plot
plot(x_,y1)
lines(x_,y1,type="l", col="black")
lines(x_,y2,type="l", col="green")
lines(x_,y3,type="l", col="red")
legend("topright", legend = c("f(x)","g(x)", "gs(x)"),
col = c("black", "green", "red"), lty = 1)
# Clear the environment, console and plots
#dev.off(dev.list()["RStudioGD"])
rm(list = ls())
cat("\014")
dev.new() # create a new plot device
library(nortest) # Testes de normalidade
set.seed(42)
N = 100   # número de amostras
na = 0    # número de amostras aceitas
X <- numeric(100)
nit <- 0  # número de iterações
gsfunc <- function(x){
if (x >= -10 & x <= 10){
gs = sqrt(2*pi)
}
else {
gs = 0
}
}
x_ = seq(-5,5,0.1)
y1 = dnorm(x_) # f(x)
y2 = y1 # g(x)
y3 = sapply(x_, gsfunc)
# Plot
plot(x_,y1)
lines(x_,y1,type="l", col="black")
lines(x_,y2,type="l", col="green")
lines(x_,y3,type="l", col="red")
legend("topright", legend = c("f(x)","g(x)", "gs(x)"),
col = c("black", "green", "red"), lty = 1)
y3
# Clear the environment, console and plots
#dev.off(dev.list()["RStudioGD"])
rm(list = ls())
cat("\014")
dev.new() # create a new plot device
library(nortest) # Testes de normalidade
set.seed(42)
N = 100   # número de amostras
na = 0    # número de amostras aceitas
X <- numeric(100)
nit <- 0  # número de iterações
gsfunc <- function(x){
if (x >= -10 & x <= 10){
gs = sqrt(2*pi)/20
}
else {
gs = 0
}
}
x_ = seq(-5,5,0.1)
y1 = dnorm(x_) # f(x)
y2 = y1 # g(x)
y3 = sapply(x_, gsfunc)
# Plot
plot(x_,y1)
lines(x_,y1,type="l", col="black")
lines(x_,y2,type="l", col="green")
lines(x_,y3,type="l", col="red")
legend("topright", legend = c("f(x)","g(x)", "gs(x)"),
col = c("black", "green", "red"), lty = 1)
# Clear the environment, console and plots
#dev.off(dev.list()["RStudioGD"])
rm(list = ls())
cat("\014")
dev.new() # create a new plot device
library(nortest) # Testes de normalidade
set.seed(42)
N = 100   # número de amostras
na = 0    # número de amostras aceitas
X <- numeric(100)
nit <- 0  # número de iterações
gsfunc <- function(x){
if (x >= -10 & x <= 10){
gs = 1/(sqrt(2*pi)*20)
}
else {
gs = 0
}
}
x_ = seq(-5,5,0.1)
y1 = dnorm(x_) # f(x)
y2 = y1 # g(x)
y3 = sapply(x_, gsfunc)
# Plot
plot(x_,y1)
lines(x_,y1,type="l", col="black")
lines(x_,y2,type="l", col="green")
lines(x_,y3,type="l", col="red")
legend("topright", legend = c("f(x)","g(x)", "gs(x)"),
col = c("black", "green", "red"), lty = 1)
# Clear the environment, console and plots
#dev.off(dev.list()["RStudioGD"])
rm(list = ls())
cat("\014")
dev.new() # create a new plot device
library(nortest) # Testes de normalidade
set.seed(42)
N = 100   # número de amostras
na = 0    # número de amostras aceitas
X <- numeric(100)
nit <- 0  # número de iterações
gsfunc <- function(x){
if (x >= -10 & x <= 10){
gs = 1/(sqrt(2*pi))
}
else {
gs = 0
}
}
x_ = seq(-5,5,0.1)
y1 = dnorm(x_) # f(x)
y2 = y1 # g(x)
y3 = sapply(x_, gsfunc)
# Plot
plot(x_,y1)
lines(x_,y1,type="l", col="black")
lines(x_,y2,type="l", col="green")
lines(x_,y3,type="l", col="red")
legend("topright", legend = c("f(x)","g(x)", "gs(x)"),
col = c("black", "green", "red"), lty = 1)
source("~/Projetos/R/sim_est/exercicio02_normal_rejeicao_grafico2.R")
source("~/Projetos/R/sim_est/exercicio02_normal_rejeicao_grafico2.R")
gs
y3
# Clear the environment, console and plots
#dev.off(dev.list()["RStudioGD"])
rm(list = ls())
cat("\014")
dev.new() # create a new plot device
library(nortest) # Testes de normalidade
set.seed(42)
N = 100   # número de amostras
na = 0    # número de amostras aceitas
X <- numeric(200)
nit <- 0  # número de iterações
gsfunc <- function(x){
if (x >= -10 & x <= 10){
gs = 1/(sqrt(2*pi))
}
else {
gs = 0
}
}
x_ = seq(-5,5,0.1)
y1 = dnorm(x_) # f(x)
y2 = y1 # g(x)
y3 = sapply(x_, gsfunc)
# Plot
plot(x_,y1)
lines(x_,y1,type="l", col="black")
lines(x_,y2,type="l", col="green")
lines(x_,y3,type="l", col="red")
legend("topright", legend = c("f(x)","g(x)", "gs(x)"),
col = c("black", "green", "red"), lty = 1)
source("~/Projetos/R/sim_est/exercicio02_normal_rejeicao_grafico2.R")
source("~/Projetos/R/sim_est/exercicio02_normal_rejeicao_grafico2.R")
source("~/Projetos/R/sim_est/exercicio02_normal_rejeicao_grafico2.R")
source("~/Projetos/R/sim_est/exercicio02_normal_rejeicao_grafico2.R")
source("~/Projetos/R/sim_est/exercicio02_normal_rejeicao_grafico2.R")
source("~/Projetos/R/sim_est/exercicio02_normal_rejeicao_grafico2.R")
source("~/Projetos/R/sim_est/exercicio02_normal_rejeicao_grafico2.R")
source("~/Projetos/R/sim_est/exercicio02_normal_rejeicao_grafico.R")
source("~/Projetos/R/sim_est/exercicio02_normal_rejeicao_grafico.R")
source("~/Projetos/R/sim_est/exercicio02_normal_rejeicao_grafico2.R")
source("~/Projetos/R/sim_est/exercicio02_normal_rejeicao_grafico.R")
source("~/Projetos/R/sim_est/exercicio02_normal_rejeicao_grafico.R")
source("~/Projetos/R/sim_est/exercicio02_normal_rejeicao_grafico.R")
source("~/Projetos/R/sim_est/exercicio02_normal_rejeicao_grafico2.R")
source("~/Projetos/R/sim_est/exercicio02_normal_rejeicao_grafico2.R")
source("~/Projetos/R/sim_est/exercicio02_normal_rejeicao_grafico2.R")
source("~/Projetos/R/sim_est/exercicio02_normal_rejeicao_grafico2.R")
source("~/Projetos/R/sim_est/exercicio02_normal_rejeicao_grafico2.R")
$double
$double.xmin
.Machine
log(0)
log(10**380)
log(10**-380)
log(10**-10)
log(10**-10000)
log(10**-1000)
log(10**-100)
log(10^-100)
log(10^-1000)
2**4
2^4
source("~/Projetos/R/sim_est/prova2/poinar_mh.R")
source("~/Projetos/R/sim_est/prova2/poinar_mh.R")
source("~/Projetos/R/sim_est/prova2/poinar_mh.R")
source("~/Projetos/R/sim_est/prova2/poinar_mh.R")
source("~/Projetos/R/sim_est/prova2/poinar_fullconditionals.R")
source("~/Projetos/R/sim_est/prova2/poinar_fullconditionals.R")
